version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: spartup_crm_postgres
    environment:
      POSTGRES_DB: spartup_crm_db
      POSTGRES_USER: spartup_crm_user
      POSTGRES_PASSWORD: spartup_crm_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - spartup_crm_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U spartup_crm_user -d spartup_crm_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: spartup_crm_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - spartup_crm_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: spartup_crm_backend
    environment:
      - DATABASE_URL=postgresql://spartup_crm_user:spartup_crm_password@postgres:5432/spartup_crm_db
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=${SECRET_KEY:-your-super-secret-key-change-this-in-production}
      - ACCESS_TOKEN_EXPIRE_MINUTES=60
      - ALGORITHM=HS256
      - MAIL_SERVER=${MAIL_SERVER:-smtp.mailtrap.io}
      - MAIL_PORT=${MAIL_PORT:-2525}
      - MAIL_USERNAME=${MAIL_USERNAME:-your-mailtrap-username}
      - MAIL_PASSWORD=${MAIL_PASSWORD:-your-mailtrap-password}
      - MAIL_FROM=${MAIL_FROM:-info@ecosystem-crm.com}
      - MAIL_STARTTLS=True
      - MAIL_SSL_TLS=False
      - USE_CREDENTIALS=True
      - VALIDATE_CERTS=True
      - ENVIRONMENT=production
      - DEBUG=False
      - HOST=0.0.0.0
      - PORT=8080
      - CORS_ORIGINS=["http://localhost:3000", "http://frontend:3000"]
      - LOG_LEVEL=INFO
      - ENABLE_EMAIL_NOTIFICATIONS=True
      - ENABLE_USER_REGISTRATION=True
      - ENABLE_ADMIN_CREATION=True
      - ENABLE_ANALYTICS=True
      - HEALTH_CHECK_ENABLED=True
      - ENABLE_PERFORMANCE_MONITORING=False
      - APP_NAME=SpartUp CRM - Ecosystem
      - APP_VERSION=1.0.0
      - CONTACT_EMAIL=ecosystem@spartup.edu
      - ORGANIZATION_NAME=SpartUp
      - ORGANIZATION_WEBSITE=https://www.spartup.edu
    volumes:
      - ./logs:/app/logs
      - ./backups:/app/backups
    ports:
      - "8080:8080"
    networks:
      - spartup_crm_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React App
  frontend:
    build:
      context: ./platform/frontend
      dockerfile: Dockerfile
    container_name: spartup_crm_frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8080
      - REACT_APP_ENVIRONMENT=production
      - GENERATE_SOURCEMAP=false
    volumes:
      - ./platform/frontend/public:/app/public
    ports:
      - "3000:3000"
    networks:
      - spartup_crm_network
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: spartup_crm_nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - spartup_crm_network
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    profiles:
      - production

  # Database Backup Service
  backup:
    image: postgres:15-alpine
    container_name: spartup_crm_backup
    environment:
      - PGPASSWORD=spartup_crm_password
    volumes:
      - ./backups:/backups
      - ./backup-script.sh:/backup-script.sh
    networks:
      - spartup_crm_network
    depends_on:
      - postgres
    command: >
      sh -c "
        chmod +x /backup-script.sh &&
        while true; do
          /backup-script.sh;
          sleep 86400;
        done
      "
    profiles:
      - production

  # Monitoring Service (Optional)
  monitoring:
    image: prom/prometheus:latest
    container_name: spartup_crm_monitoring
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - spartup_crm_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: spartup_crm_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    networks:
      - spartup_crm_network
    depends_on:
      - monitoring
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  spartup_crm_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 